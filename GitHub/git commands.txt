Basic commands
1. git status //to check status of the repo
2. git add -a  //add all new and changed files to staging area
3. git rm -r [file-name.txt]  // remove file or folder

save work for some time

1. git stash -u //this will stash all the changes that are not yet commited
2. git stash pop //will show the changes back

revert a commit
1. git reset --soft HEAD~1  //undo last commit and keep changes staged
2. git reset --mixed HEAD~1 //undo last commit, keep our changes in working directory but unstage them
3. git reset --hard HEAD~1 //undo last commit, discard all changes from commit includingthe ones in the working directory

create and merge branch
1. git checkout -b <new-branch-name> //create new branch
2. git merge <any-branch-name> //will merge new branch with that branch   (publish immediately after creation and merging)

delete a branch
1. git push origin --delete <branch-name> //delete remote branch
2. git branch -d <branc-name> //delete a different branch then current (for local branches)
3. git branch -D <branch-name> //delete a branch which is not merged -D will delete forcefully (for local branches)

kill the active port or windows
1. netstat -ano | findstr :4001
2. taskkill /pid 8020 /F 

checkbranches on local and on remote
1. git ls-remote --heads origin  //this will check branch on remote
2. git branch // this will give list of available branches on local

Rename branch
1. git branch -m new-branch-name //this will rename the current active branch locally

		.........remote branch rename ........
1. git branch -m new-branch-name  //this will rename the current active branch locally
2. git push origin --delete old-branch-name //this will remove the old branch
3. git push origin new-branch //this will push new branch
4. git push --set-upstream origin new-branch-name  //This ensures that your local branch is now tracking the remote new-branch-name.
5. git fetch --all --prune //If other people are working on the same repository, they might still have references to the old branch.

Forget Remote branches Refs
1. git remote prune origin //this will forget all branches on local vs code that are not currently on remote or have been renamed

Creating and Using Tags for Version Control (MVP, Feature-Release)
1. git tag -a v1.0.0 -m "Initial MVP release" //this will create a pointer or tag on exact commit we use this for version controlling
	(i). git checkout v1.1.0  //Switches to the code snapshot from version v1.1.0 (tag). Useful for reviewing or testing that specific release 	without changing the current branch.
 	(ii). git reset --hard v1.0.0 // Forcefully moves the current branch back to version v1.0.0, deleting all changes and commits made after it. 	⚠️ Destructive – use with caution. 
2. git tag backup-before-reset //This saves your current state in case you need to restore it later.
3. git log --oneline v1.0.0..HEAD //Shows the commits that will be removed if you reset to v1.0.0.
4. git checkout backup-before-reset -or- git reset --hard backup-before-reset //if you regret the reset
